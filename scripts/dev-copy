#!/usr/bin/env bash

set -e
SCRIPTDIR=$( cd "${0%/*}" && pwd)
ROOTDIR="${SCRIPTDIR%/*}"

problems() {
    2>&1 echo "Problem: ${0}"
    exit 1
}

usage() {
    echo "${0} local mc_dir"
    echo "${0}               -s <save file>"
}

if [ $# -lt 1 ] ; then
    usage
    exit 1
fi
OP="$1"
shift
if [ "$OP" == "local" ] ; then
    if [ $# -lt 1 ] ; then
        usage
    fi
    SRC="$1"
    MC_SRC="${SRC}/minecraft"
    shift
    SAVE="ttmb dev"
    while getopts "s:" arg ; do
        case $arg in
            s)
                SAVE="$OPTARG"
                ;;
            *)
                usage
                exit 1
        esac
    done
    if [ ! -d "$SRC" ] \
           || [ ! -d "$MC_SRC" ] \
           || [ ! -e "${SRC}/instance.cfg" ] ; then
        problems "Unable to find MC dir"
    fi
    MC_SAVE="${MC_SRC}/saves/${SAVE}"
    if [ ! -d "$MC_SAVE" ] ; then
        problems "Unable to find MC save dir"
    fi
    # copy active and inactive structures
    cp "${MC_SRC}/structures/active/"*.rcst "${ROOTDIR}/src/structures/active/"
    cp "${MC_SRC}/structures/inactive/"*.rcst "${ROOTDIR}/src/structures/inactive/"
    # lore is autogenerated so we never copy it back
    for f in "${MC_SRC}/structures/active/"*.rcig ; do
        if ! grep -q "lore_" <<< "$(basename "$f")" ; then
            cp "$f" "${ROOTDIR}/src/structures/active"
        fi
    done
    # copy any custom transforms / placers
    cp "${MC_SRC}/structures/active/"*.rcmt "${ROOTDIR}/src/structures/active/"
    cp "${MC_SRC}/structures/active/"*.rcgp "${ROOTDIR}/src/structures/active/"
    # copy active and alt quests
    cp "${MC_SRC}/config/betterquesting/DefaultQuests.json" "${ROOTDIR}/src/config/betterquesting/"
    cp "${MC_SRC}/config/betterquesting/saved_quests/"*.json "${ROOTDIR}/src/config/betterquesting/saved_quests/"
    # copy npcs factions
    cp "${MC_SAVE}/customnpcs/factions.dat" "${ROOTDIR}/src/config/copy/customnpcs/factions.dat"
    # copy npcs tab by tab
    for f in "${MC_SAVE}/customnpcs/clones/"* ; do
        TAB="$(basename "$f")"
        MC_TAB="${ROOTDIR}/src/config/copy/customnpcs/clones/${TAB}"
        if [ ! -d "$MC_TAB" ] ; then
            mkdir -p "$MC_TAB"
        fi
        cp "$f"/*.json "$MC_TAB"
    done
    # copy dialogs category by category
    find "${MC_SAVE}/customnpcs/dialogs/" -name '*.json' -print0 | while read -rd $'\0' file
    do
        D_DIR="$(dirname "$file")"
        D_CAT="$(basename "$D_DIR")"
        MC_CAT="${ROOTDIR}/src/config/copy/customnpcs/dialogs/${D_CAT}"
        if [ ! -d "$MC_CAT" ] ; then
            mkdir -p "$MC_CAT"
        fi
        cp "$file" "${MC_CAT}"
    done
    # copy quests category by category
    find "${MC_SAVE}/customnpcs/quests/" -name '*.json' -print0 | while read -rd $'\0' file
    do
        D_DIR="$(dirname "$file")"
        D_CAT="$(basename "$D_DIR")"
        MC_CAT="${ROOTDIR}/src/config/copy/customnpcs/quests/${D_CAT}"
        if [ ! -d "$MC_CAT" ] ; then
            mkdir -p "$MC_CAT"
        fi
        cp "$file" "${MC_CAT}"
    done
elif [ "$OP" == "remote" ] ; then
    if [ $# == 0 ] ; then
        problems "Must specify devtool commands"
    fi
    "${SCRIPTDIR}/versiongen.sh"
    docker run \
           -it --rm \
           -v "${ROOTDIR}:/mnt" \
           -u "$(id -u):$(id -g)" \
           --entrypoint "/mnt/devtool/devtool.py" \
           "ghcr.io/tribesthatmaybe/workflow:$(cat "${ROOTDIR}/.version-container")" \
           $*
else
    usage
    exit 1
fi
